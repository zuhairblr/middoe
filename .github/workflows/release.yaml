name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"          # Stable releases (e.g., 1.0.0)
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"   # Alpha releases (e.g., 1.0.0a1)
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"   # Beta releases (e.g., 1.0.0b1)
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"  # Release candidates (e.g., 1.0.0rc1)

env:
  PACKAGE_NAME: "middoe"
  OWNER: "zuhairblr"

jobs:

  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            echo "No tag found"
            exit 1
          fi

  setup_and_build:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set project version with Poetry
        run: |
          poetry version ${{ needs.details.outputs.new_version }}

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Run stub generation
        run: poetry run stubgen ${{ env.PACKAGE_NAME }} -o .

      - name: Build source and wheel distribution
        run: |
          poetry build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  test_pypi_publish:
    name: Upload release to Test PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    if: contains(needs.details.outputs.suffix, 'a') || contains(needs.details.outputs.suffix, 'b') || contains(needs.details.outputs.suffix, 'rc')
    environment:
      name: test-release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    if: "!contains(needs.details.outputs.suffix, 'a') && !contains(needs.details.outputs.suffix, 'b') && !contains(needs.details.outputs.suffix, 'rc')"
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes



#ðŸš€ Stable Release	0.0.12	PyPI
#ðŸ§ª Test PyPI (Alpha)	0.0.12a1	Test PyPI
#ðŸ§ª Test PyPI (Beta)	0.0.12b1	Test PyPI
#ðŸ§ª Test PyPI (RC)	0.0.12rc1	Test PyPI
#
#
#git tag 0.0.12
#git push origin --tags
#
#git tag 0.0.12a1
#git push origin --tags
