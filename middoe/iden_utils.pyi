from _typeshed import Incomplete

logger: Incomplete

def Plot_estimability(round_data, path, solver): ...
def plot_rCC_vs_k(x_values, rCC_values, round, framework_settings, solver) -> None: ...
def plot_sobol_results(time_samples, sobol_analysis_results, sobol_problem, solver, response_key, framework_settings) -> None: ...

class Plotting_Results:
    path: Incomplete
    case: Incomplete
    mutation_settings: Incomplete
    modelling_folder: str
    def __init__(self, modelling_settings, framework_settings) -> None: ...
    def fit_plot(self, data, result, round, model_structure) -> None: ...
    def conf_plot(self, parameters, cov_matrices, confidence_intervals, round) -> None: ...

class Plotting_FinalResults:
    round_data: Incomplete
    winner_solver: Incomplete
    selected_rounds: Incomplete
    def __init__(self, round_data, winner_solver, selected_rounds) -> None: ...
    def conf_plot(self, filename, ellipsoid_volume_filename: str = 'ellipsoid_volume_across_rounds.png', std_devs_filename: str = 'parameter_std_devs_across_rounds.png', parameter_estimates_filename: str = 'parameter_estimates_across_rounds.png'): ...
    def conf_plot_metrics(self, ellipsoid_volume_filename, std_devs_filename) -> None: ...
    def accvsprec_plot(self, filename) -> None: ...
    def pt_plot(self, filename, roundc) -> None: ...
    def reporter(self, filename) -> None: ...
    def pcomp_plot(self, save_path) -> None: ...
    def tcomp_plot(self, save_path) -> None: ...

def validation_R2(prediction_metric, validation_metric, reference_metric, full_path, case) -> None: ...
def validation_params(parameters, ref_params, full_path) -> None: ...
def save_sobol_results_to_excel(results2, folder_path, file_name: str = 'sobol_results.xlsx') -> None: ...
